//
// Autogenerated by Natalie - Storyboard Generator Script.
// http://blog.krzyzanowskim.com
//

import UIKit

//MARK: - Storyboards
enum Storyboards: String {
    case Main = "Main"

    private var instance:UIStoryboard {
        return UIStoryboard(name: self.rawValue, bundle: nil)
    }

    func instantiateInitialViewController() -> UIViewController? {
        switch (self) {
        case Main:
            return self.instance.instantiateInitialViewController() as! UINavigationController
        default:
            return self.instance.instantiateInitialViewController() as? UIViewController
        }
    }

    func instantiateViewControllerWithIdentifier(identifier: String) -> UIViewController {
        return self.instance.instantiateViewControllerWithIdentifier(identifier) as! UIViewController
    }
}

//MARK: - SegueKind
enum SegueKind: String, Printable {    
    case Relationship = "relationship" 
    case Show = "show"                 
    case Presentation = "presentation" 
    case Embed = "embed"               
    case Unwind = "unwind"             

    var description: String { return self.rawValue } 
}

//MARK: - SegueProtocol
protocol SegueProtocol {
    var identifier: String { get }
}

//MARK: - UIViewController extension
extension UIViewController {
    class var storyboardIdentifier:String? { return nil }
    func performSegue(segue: SegueProtocol, sender: AnyObject?) {
       performSegueWithIdentifier(segue.identifier, sender: sender)
    }
}

extension UIStoryboardSegue {
    func selection() -> MainViewController.Segue? {
        if let identifier = self.identifier {
            return MainViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

//MARK: - MainViewController

extension MainViewController {
    override class var storyboardIdentifier:String? { return "MainViewController" }
    class func instantiateFromStoryboard(storyboard: Storyboards) -> MainViewController! {
        return storyboard.instantiateViewControllerWithIdentifier(self.storyboardIdentifier!) as? MainViewController
    }
}

extension MainViewController { 

    enum Segue: String, Printable, SegueProtocol {
        case ScreenOneSegueButton = "ScreenOneSegueButton"
        case ScreenOneSegue = "ScreenOneSegue"
        case ScreenTwoSegue = "ScreenTwoSegue"
        case SceneOneGestureRecognizerSegue = "SceneOneGestureRecognizerSegue"

        var kind: SegueKind? {
            switch (self) {
            case ScreenOneSegueButton:
                return SegueKind(rawValue: "push")
            case ScreenOneSegue:
                return SegueKind(rawValue: "push")
            case ScreenTwoSegue:
                return SegueKind(rawValue: "push")
            case SceneOneGestureRecognizerSegue:
                return SegueKind(rawValue: "push")
            default:
                preconditionFailure("Invalid value")
                break
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ScreenOneSegueButton:
                return ScreenOneViewController.self
            case ScreenOneSegue:
                return ScreenOneViewController.self
            case ScreenTwoSegue:
                return ScreenTwoViewController.self
            case SceneOneGestureRecognizerSegue:
                return ScreenOneViewController.self
            default:
                assertionFailure("Unknown destination")
                return nil
            }
        }

        var identifier: String { return self.description } 
        var description: String { return self.rawValue }
    }

}

