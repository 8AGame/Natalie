//
//  Parser.swift
//  Natalie
//
//  Created by Marcin Krzyzanowski on 07/08/16.
//  Copyright Â© 2016 Marcin Krzyzanowski. All rights reserved.
//

import Foundation

struct Parser {
    static func processStoryboards(storyboards: [StoryboardFile], os: OS) {

        print("//")
        print("// Autogenerated by Natalie - Storyboard Generator Script.")
        print("// http://blog.krzyzanowskim.com")
        print("//")
        print("")
        print("import \(os.framework)")
        let modules = storyboards.flatMap{ $0.storyboard.customModules }
        for module in Set<String>(modules) {
            print("import \(module)")
        }
        print("")

        print("//MARK: - Storyboards")

        print("")
        print("extension \(os.storyboardType) {")
        for (signatureType, returnType) in os.storyboardInstantiationInfo {
            print("    func instantiateViewController<T: \(returnType) where T: IdentifiableProtocol>(type: T.Type) -> T? {")
            print("        let instance = type.init()")
            print("        if let identifier = instance.storyboardIdentifier {")
            print("            return self.instantiate\(signatureType)WithIdentifier(identifier) as? T")
            print("        }")
            print("        return nil")
            print("    }")
            print("")
        }
        print("}")

        print("")
        print("protocol Storyboard {")
        print("    static var storyboard: \(os.storyboardType) { get }")
        print("    static var identifier: String { get }")
        print("}")
        print("")

        print("struct Storyboards {")
        for file in storyboards {
            file.storyboard.processStoryboard(storyboardName: file.storyboardName, os: os)
        }
        print("}")
        print("")

        print("//MARK: - ReusableKind")
        print("enum ReusableKind: String, CustomStringConvertible {")
        print("    case TableViewCell = \"tableViewCell\"")
        print("    case CollectionViewCell = \"collectionViewCell\"")
        print("")
        print("    var description: String { return self.rawValue }")
        print("}")
        print("")

        print("//MARK: - SegueKind")
        print("enum SegueKind: String, CustomStringConvertible {    ")
        print("    case Relationship = \"relationship\" ")
        print("    case Show = \"show\"                 ")
        print("    case Presentation = \"presentation\" ")
        print("    case Embed = \"embed\"               ")
        print("    case Unwind = \"unwind\"             ")
        print("    case Push = \"push\"                 ")
        print("    case Modal = \"modal\"               ")
        print("    case Popover = \"popover\"           ")
        print("    case Replace = \"replace\"           ")
        print("    case Custom = \"custom\"             ")
        print("")
        print("    var description: String { return self.rawValue } ")
        print("}")
        print("")
        print("//MARK: - IdentifiableProtocol")
        print("")
        print("public protocol IdentifiableProtocol: Equatable {")
        print("    var storyboardIdentifier: String? { get }")
        print("}")
        print("")
        print("//MARK: - SegueProtocol")
        print("")
        print("public protocol SegueProtocol {")
        print("    var identifier: String? { get }")
        print("}")
        print("")

        print("public func ==<T: SegueProtocol, U: SegueProtocol>(lhs: T, rhs: U) -> Bool {")
        print("    return lhs.identifier == rhs.identifier")
        print("}")
        print("")
        print("public func ~=<T: SegueProtocol, U: SegueProtocol>(lhs: T, rhs: U) -> Bool {")
        print("    return lhs.identifier == rhs.identifier")
        print("}")
        print("")
        print("public func ==<T: SegueProtocol>(lhs: T, rhs: String) -> Bool {")
        print("    return lhs.identifier == rhs")
        print("}")
        print("")
        print("public func ~=<T: SegueProtocol>(lhs: T, rhs: String) -> Bool {")
        print("    return lhs.identifier == rhs")
        print("}")
        print("")
        print("public func ==<T: SegueProtocol>(lhs: String, rhs: T) -> Bool {")
        print("    return lhs == rhs.identifier")
        print("}")
        print("")
        print("public func ~=<T: SegueProtocol>(lhs: String, rhs: T) -> Bool {")
        print("    return lhs == rhs.identifier")
        print("}")
        print("")

        print("//MARK: - ReusableViewProtocol")
        print("public protocol ReusableViewProtocol: IdentifiableProtocol {")
        print("    var viewType: \(os.viewType).Type? { get }")
        print("}")
        print("")

        print("public func ==<T: ReusableViewProtocol, U: ReusableViewProtocol>(lhs: T, rhs: U) -> Bool {")
        print("    return lhs.storyboardIdentifier == rhs.storyboardIdentifier")
        print("}")
        print("")

        print("//MARK: - Protocol Implementation")
        print("extension \(os.storyboardSegueType): SegueProtocol {")
        print("}")
        print("")

        if let reusableViews = os.resuableViews {
            for reusableView in reusableViews {
                print("extension \(reusableView): ReusableViewProtocol {")
                print("    public var viewType: UIView.Type? { return self.dynamicType }")
                print("    public var storyboardIdentifier: String? { return self.reuseIdentifier }")
                print("}")
                print("")
            }
        }

        for controllerType in os.storyboardControllerTypes {
            print("//MARK: - \(controllerType) extension")
            print("extension \(controllerType) {")
            print("    func performSegue<T: SegueProtocol>(segue: T, sender: AnyObject?) {")
            print("        if let identifier = segue.identifier {")
            print("            performSegueWithIdentifier(identifier, sender: sender)")
            print("        }")
            print("    }")
            print("")
            print("    func performSegue<T: SegueProtocol>(segue: T) {")
            print("        performSegue(segue, sender: nil)")
            print("    }")
            print("}")
            print("")
        }

        if os == OS.iOS {
            print("//MARK: - UICollectionView")
            print("")
            print("extension UICollectionView {")
            print("")
            print("    func dequeueReusableCell<T: ReusableViewProtocol>(reusable: T, forIndexPath: NSIndexPath!) -> UICollectionViewCell? {")
            print("        if let identifier = reusable.storyboardIdentifier {")
            print("            return dequeueReusableCellWithReuseIdentifier(identifier, forIndexPath: forIndexPath)")
            print("        }")
            print("        return nil")
            print("    }")
            print("")
            print("    func registerReusableCell<T: ReusableViewProtocol>(reusable: T) {")
            print("        if let type = reusable.viewType, identifier = reusable.storyboardIdentifier {")
            print("            registerClass(type, forCellWithReuseIdentifier: identifier)")
            print("        }")
            print("    }")
            print("")
            print("    func dequeueReusableSupplementaryViewOfKind<T: ReusableViewProtocol>(elementKind: String, withReusable reusable: T, forIndexPath: NSIndexPath!) -> UICollectionReusableView? {")
            print("        if let identifier = reusable.storyboardIdentifier {")
            print("            return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier, forIndexPath: forIndexPath)")
            print("        }")
            print("        return nil")
            print("    }")
            print("")
            print("    func registerReusable<T: ReusableViewProtocol>(reusable: T, forSupplementaryViewOfKind elementKind: String) {")
            print("        if let type = reusable.viewType, identifier = reusable.storyboardIdentifier {")
            print("            registerClass(type, forSupplementaryViewOfKind: elementKind, withReuseIdentifier: identifier)")
            print("        }")
            print("    }")
            print("}")

            print("//MARK: - UITableView")
            print("")
            print("extension UITableView {")
            print("")
            print("    func dequeueReusableCell<T: ReusableViewProtocol>(reusable: T, forIndexPath: NSIndexPath!) -> UITableViewCell? {")
            print("        if let identifier = reusable.storyboardIdentifier {")
            print("            return dequeueReusableCellWithIdentifier(identifier, forIndexPath: forIndexPath)")
            print("        }")
            print("        return nil")
            print("    }")
            print("")
            print("    func registerReusableCell<T: ReusableViewProtocol>(reusable: T) {")
            print("        if let type = reusable.viewType, identifier = reusable.storyboardIdentifier {")
            print("            registerClass(type, forCellReuseIdentifier: identifier)")
            print("        }")
            print("    }")
            print("")
            print("    func dequeueReusableHeaderFooter<T: ReusableViewProtocol>(reusable: T) -> UITableViewHeaderFooterView? {")
            print("        if let identifier = reusable.storyboardIdentifier {")
            print("            return dequeueReusableHeaderFooterViewWithIdentifier(identifier)")
            print("        }")
            print("        return nil")
            print("    }")
            print("")
            print("    func registerReusableHeaderFooter<T: ReusableViewProtocol>(reusable: T) {")
            print("        if let type = reusable.viewType, identifier = reusable.storyboardIdentifier {")
            print("             registerClass(type, forHeaderFooterViewReuseIdentifier: identifier)")
            print("        }")
            print("    }")
            print("}")
            print("")
        }

        for file in storyboards {
            file.storyboard.processViewControllers()
        }
    }
}
